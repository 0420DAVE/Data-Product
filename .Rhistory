#create empty matrix
ll<-data.frame(NA,nrow=10,ncol=55)
View(ozone)
ll<-data.frame(NA,nrow=10,ncol=155)
ll[i,]<-predict(loess0,newdata=data.frame[ozone=1:155])
}
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replacement=T)
ozone0<ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame[ozone=1:155])
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replacement=T)
ozone0<ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame[ozone=1:155])
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame[ozone=1:155])
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame[ozone=1:155])
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155)
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
newdata
ll
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
# reorder rows based on ozone variable
ozone <- ozone[order(ozone$ozone),]
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=155)
# iterate 10 times
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=0.2)}
ll
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
# plot each prediction model
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
# plot the average in red
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
# plot each prediction model
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),];
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),];
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),]
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155) # why I can't use matrix here??????!!!!!
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155) # why I can't use matrix here??????!!!!!
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
line(1:155,sapply(ll,2,mean),col="red",lwd=2)
line(1:155,apply(ll,2,mean),col="red",lwd=2)
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
points(1:155,apply(ll,2,mean),col="red",lwd=1)
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreebag$fit,predict=cteeBag$pred,aggregate=ctreebag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=cteeBag$pred,aggregate=ctreeBag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=ctreeBag$pred,aggregate=ctreeBag&aggregate))
library(party); data(ozone,package="ElemStatLearn")
install.packages"party"
install.packages("party")
library(party); data(ozone,package="ElemStatLearn")
# reorder rows based on ozone variable
ozone <- ozone[order(ozone$ozone),]
# extract predictors
predictors <- data.frame(ozone=ozone$ozone)
# extract outcome
temperature <- ozone$temperature
# run bagging algorithm
treebag <- bag(predictors, temperature, B = 10,
# custom bagging function
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
# plot the first fit
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
# plot the aggregated predictions
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
```
colNames(iris)
colnames(iris)
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-data.frame(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
8732
2
3
library(shiny)
library(shinyapps)
runApp(0)
runApp()
setwd("~/Documents/## Github Repo/Data-Product")
shinyApp()
runApp()
delpoyApp(0)
dployApp()
deployApp()
setnames(outcome,"value","Mortality Rate")
runApp90
runApp()
outcome$Mortality.Rate
View(outcome)
setnames(outcome,"value","Mortality.Rate")
View(outcome)
groupByState <- function(dt, Index, state) {
result <- subset(dt,variable %in% Index & State %in% state)
result<-result[order(result$Mortality.Rate),]
result<-na.omit(result)
result<-head(result,100)
return(result)
}
x<-groupByState(outcome,"Heart Attack",c("AL","AR"))
relative <- function(dt, Index,state) {
dt <- groupByState(dt, Index, state)
result<-data.frame(dt,relative=dt$Mortality.Rate-mean(dt$Mortality.Rate))
return(result)
}
x<-relative(outcome,"Heart Attack",c("AL","AR"))
runApp()
View(x)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-outcome[,c(1:11,17,23)]
# Delete empty column
outcome<-outcome[,-c(4,5)]
outcome[,9:11]<-sapply(outcome[,9:11],as.numeric)
outcome<-data.table(outcome)
# Explore the data set
names<-names(outcome);names
table(sapply(outcome,class))
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Heart Attack")
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Heart Failure")
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Pneumonia")
# Exploratory data analysis
sum(is.na(outcome))
table(outcome$State)
state <- sort(unique(outcome$State))
# Reshape data.table
outcome<-melt(outcome,id=1:8,measure=9:11)
outcome$Mortality.Rate[outcome$Mortality.Rate=="Not Available"]<-NA
outcome$variable<-as.character(outcome$variable)
View(outcome)
setnames(outcome,"value","Mortality.Rate")
# Aggregate result by State
groupByState <- function(dt, Index, state) {
result <- subset(dt,variable %in% Index & State %in% state)
result<-result[order(result$Mortality.Rate),]
result<-na.omit(result)
result<-head(result,100)
return(result)
}
x<-groupByState(outcome,"Heart Attack",c("AL","AR"))
#x$relative<-x$Mortality.Rate-mean(x$Mortality.Rate)
# Take relative Mortality.Rate of mortality rate, given the state selected
relative <- function(dt, Index,state) {
dt <- groupByState(dt, Index, state)
result<-data.frame(dt,relative=dt$Mortality.Rate-mean(dt$Mortality.Rate))
return(result)
}
#x<-relative(outcome,"Heart Attack",c("AL","AR"))
x<-relative(outcome,"Heart Attack",c("AL","AR"))
View(x)
runApp()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-outcome[,c(1:11,17,23)]
# Delete empty column
outcome<-outcome[,-c(4,5)]
outcome[,9:11]<-sapply(outcome[,9:11],as.numeric)
outcome<-data.table(outcome)
# Explore the data set
names<-names(outcome);names
table(sapply(outcome,class))
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Heart Attack")
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Heart Failure")
setnames(outcome, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Pneumonia")
# Exploratory data analysis
sum(is.na(outcome))
table(outcome$State)
state <- sort(unique(outcome$State))
# Reshape data.table
outcome<-melt(outcome,id=1:8,measure=9:11)
View(outcome)
outcome$value[outcome$value=="Not Available"]<-NA
View(outcome)
outcome$variable<-as.character(outcome$variable)
setnames(outcome,"value","Mortality.Rate")
runApp()
runApp()
runApp(0)
runApp()
names(outcome)
names(outcome)[10]<-"cc"
names(outcome)
